package Thread.ArtConcurrentBook.chapter08;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.FutureTask;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.Semaphore;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;/** *  * @author tengfei.fangtf * @version $Id: SemaphoreTest.java, v 0.1 2015-8-1 ÉÏÎç12:10:19 tengfei.fangtf Exp $ */public class SemaphoreTest {    private static final int THREAD_COUNT = 30;    private static ExecutorService threadPool = Executors.newFixedThreadPool(THREAD_COUNT);    private static Semaphore s= new Semaphore(10);    private static ThreadPoolExecutor executor = new ThreadPoolExecutor(THREAD_COUNT, THREAD_COUNT,0L, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>(),new ThreadPoolExecutor.AbortPolicy());	    public static volatile int COUNT=0;        public static void main(String[] args) throws Exception {//    	List<Future<String>> list = new ArrayList<Future<String>>();//    	for (int i = 0; i < THREAD_COUNT; i++) {//    		Future<String> task = executor.submit(new Callable<String>() {//                //                public String call() {//                    try {//                        s.acquire();//                        System.out.println(++SemaphoreTest.COUNT+":save data"+" ****CompletedTaskCount:"+executor.getCompletedTaskCount()+" ****TaskCount:"+executor.getTaskCount());//                        Thread.sleep(5000);//                        s.release();//                    } catch (InterruptedException e) {//                    	return "";//                    }//                    return SemaphoreTest.COUNT+"";//                }//            });//    		list.add(task);//        }//    	//    	for (Future<String> bean :list) {//    		System.out.println(bean.get());//		}//    	//    	executor.shutdown();    	        for (int i = 0; i < THREAD_COUNT; i++) {            threadPool.submit(new Runnable() {                public void run() {                    try {                        s.acquire();                        System.out.println(++SemaphoreTest.COUNT+":save data");//                        Thread.sleep(5000);                        s.release();                    } catch (InterruptedException e) {                    }                }            });        }        threadPool.shutdown();    }}