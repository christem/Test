package Thread.ArtConcurrentBook.chapter07;import java.util.concurrent.CountDownLatch;import java.util.concurrent.atomic.AtomicBoolean;import java.util.concurrent.atomic.AtomicInteger;/** *  * @author tengfei.fangtf * @version $Id: AtomicIntegerTest.java, v 0.1 2015-8-1 ÉÏÎç12:13:16 *          tengfei.fangtf Exp $ */public class AtomicIntegerTest {		static CountDownLatch c = new CountDownLatch(100);		public volatile static int COUNT = 0;		public static void test1() {		AtomicInteger ai = new AtomicInteger(1);		System.out.println(ai.getAndIncrement());		System.out.println(ai.get());		System.out.println(ai.addAndGet(3));						AtomicBoolean boolean1 = new AtomicBoolean();		System.out.println(boolean1.get());		boolean1.compareAndSet(false, true);		System.out.println(boolean1.get());		boolean1.compareAndSet(false, false);		System.out.println(boolean1.get());	}	public static void test2() throws InterruptedException {		AtomicInteger ai = new AtomicInteger(0);				for (int i = 0; i <= 100; ++i) {			MyThread myThread = new MyThread("²âÊÔÏß³Ì" + i, ai, c);			new Thread(myThread).start();		}		c.await();		System.out.println(ai);	}	public static void main(String[] args) throws InterruptedException {		 test1();//		test2();	}}class MyThread implements Runnable {	AtomicInteger ai;	CountDownLatch c;	public MyThread(String name) {		Thread.currentThread().setName(name);	}	public MyThread(String name, AtomicInteger ai, CountDownLatch c) {		Thread.currentThread().setName(name);		this.ai = ai;		this.c = c;	}	@Override	public void run() {		System.out.println("1:" + Thread.currentThread().getName() + ":"				+ ai.getAndIncrement()+"volatile:"+(++AtomicIntegerTest.COUNT));		// System.out.println("2:" + Thread.currentThread().getName() + ":"		// + ai.get());		c.countDown();	}}